{
  "name": "Cannery",
  "tagline": "A modern ES6 class-based event-driven ORM for client-side or server-side JavaScript.",
  "body": "## Welcome to Cannery\r\n\r\nA modern ES6 class-based event-driven ORM for client-side or server-side JavaScript.\r\n\r\n##  Getting Started\r\n\r\nGetting started with Cannery is easy. You just need to extend the Cannery base Model class and provide a `getFields()` method that returns an object describing the fields on the model. From there, we can instantiate the model and use `get()` and `set()` to set and get data on the model fields.\r\n\r\n```\r\nconst { Model, Type } = require('cannery');\r\nconst { StringType, NumberType } = Type;\r\n\r\nclass Car extends Model {\r\n\r\n    getFields () {\r\n        return {\r\n            make: StringType,\r\n            model: StringType,\r\n            year: NumberType\r\n        };\r\n    }\r\n\r\n}\r\n\r\nconst myCar = new Car();\r\n\r\nmyCar.set('make', 'Ford');\r\n\r\nconsole.log(myCar.get('make')); // Ford\r\n```\r\n\r\nSo far, this is all pretty much what you might expect from any JavaScript model layer, but it gets better when you start handling async data. We'll get into how to define where our data is coming from (ajax, websockets, localStorage, some database, etc...) in the documentation, but for now, let's just say that the secret sauce of Cannery is that every field is return synchronously at first, and then events are triggered once the data is retrieved so that the UI layer can redraw with the updated data.\r\n\r\n```\r\nconst myCar = new Car(1);\r\n\r\n// This is triggered any time data is retrieved from some remote source such as an Ajax call\r\nmyCar.on('change', () => {\r\n    myCar.get('make'); // returns the value of the make retrieved from the server\r\n});\r\n\r\nmyCar.get('make'); // returns an empty string immediately\r\n```\r\n\r\n## API\r\n\r\n### Adapters\r\n\r\nTo change what type of data store you set and get data from, just switch out the adapter. For example, you may want to get data from ajax, mongoDB, localStorage, etc. No problem, just replace the `getAdapter()` method with your own:\r\n\r\n```\r\nconst Cannery = require('cannery');\r\n\r\nclass User extends Cannery.Model {\r\n\r\n    getAdapter () {\r\n        return new MyAdapter();\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = User;\r\n```\r\n\r\n### Cannery.Type\r\n\r\nFields in cannery can have types. Different types operate in different ways to handle data that is set and gotten from the model.\r\n\r\n### Cannery.Model\r\n\r\nThis is the base model class where all the magic happens.\r\n\r\n## Contributing\r\n\r\nWe encourage you to contribute to Cannery by submitting bug reports and pull requests through [Github](http//github.com).\r\n\r\n## License\r\n\r\nCannery is released under The [MIT License](http://www.opensource.org/licenses/MIT) (MIT)\r\n\r\nCopyright (c) [2015] [Aloompa LLC]\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}